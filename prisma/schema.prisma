generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  githubId        String?
  accounts        Account[]
  sessions        Session[]
  tasks           Task[]
  projects        UsersOnProjects[]
  invitesSent     ProjectInvites[]  @relation(name: "sender")
  invitesReceived ProjectInvites[]  @relation(name: "receiver")

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Task {
  id              String    @id @default(cuid())
  userId          String
  projectId       String?
  title           String
  description     String?
  duration        String?
  githubCommitUrl String?
  startTime       DateTime
  finishTime      DateTime?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([projectId])
  @@map("tasks")
}

model Project {
  id            String            @id @default(cuid())
  ownerId       String
  title         String
  githubRepoUrl String?
  description   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  tasks         Task[]
  users         UsersOnProjects[]
  invites       ProjectInvites[]

  @@map("projects")
}

model UsersOnProjects {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  isOwner    Boolean  @default(false)
  assignedAt DateTime @default(now())

  @@id([userId, projectId])
  @@map("usersOnProjects")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ProjectInvites {
  id         String       @id @default(cuid())
  sender     User         @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "sender")
  senderId   String
  receiver   User         @relation(fields: [receiverId], references: [id], onDelete: Cascade, name: "receiver")
  receiverId String
  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  status     InviteStatus @default(PENDING)
  createdAt  DateTime     @default(now())

  @@map("projectInvites")
}
